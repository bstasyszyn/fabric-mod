// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger/fabric-chaincode-go/shim"
	"github.com/hyperledger/fabric/extensions/chaincode/api"
)

type UserCC struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	ChaincodeStub        func() shim.Chaincode
	chaincodeMutex       sync.RWMutex
	chaincodeArgsForCall []struct{}
	chaincodeReturns     struct {
		result1 shim.Chaincode
	}
	chaincodeReturnsOnCall map[int]struct {
		result1 shim.Chaincode
	}
	VersionStub        func() string
	versionMutex       sync.RWMutex
	versionArgsForCall []struct{}
	versionReturns     struct {
		result1 string
	}
	versionReturnsOnCall map[int]struct {
		result1 string
	}
	GetDBArtifactsStub        func(collNames []string) map[string]*api.DBArtifacts
	getDBArtifactsMutex       sync.RWMutex
	getDBArtifactsArgsForCall []struct {
		collNames []string
	}
	getDBArtifactsReturns struct {
		result1 map[string]*api.DBArtifacts
	}
	getDBArtifactsReturnsOnCall map[int]struct {
		result1 map[string]*api.DBArtifacts
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UserCC) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nameReturns.result1
}

func (fake *UserCC) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *UserCC) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *UserCC) NameReturnsOnCall(i int, result1 string) {
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *UserCC) Chaincode() shim.Chaincode {
	fake.chaincodeMutex.Lock()
	ret, specificReturn := fake.chaincodeReturnsOnCall[len(fake.chaincodeArgsForCall)]
	fake.chaincodeArgsForCall = append(fake.chaincodeArgsForCall, struct{}{})
	fake.recordInvocation("Chaincode", []interface{}{})
	fake.chaincodeMutex.Unlock()
	if fake.ChaincodeStub != nil {
		return fake.ChaincodeStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.chaincodeReturns.result1
}

func (fake *UserCC) ChaincodeCallCount() int {
	fake.chaincodeMutex.RLock()
	defer fake.chaincodeMutex.RUnlock()
	return len(fake.chaincodeArgsForCall)
}

func (fake *UserCC) ChaincodeReturns(result1 shim.Chaincode) {
	fake.ChaincodeStub = nil
	fake.chaincodeReturns = struct {
		result1 shim.Chaincode
	}{result1}
}

func (fake *UserCC) ChaincodeReturnsOnCall(i int, result1 shim.Chaincode) {
	fake.ChaincodeStub = nil
	if fake.chaincodeReturnsOnCall == nil {
		fake.chaincodeReturnsOnCall = make(map[int]struct {
			result1 shim.Chaincode
		})
	}
	fake.chaincodeReturnsOnCall[i] = struct {
		result1 shim.Chaincode
	}{result1}
}

func (fake *UserCC) Version() string {
	fake.versionMutex.Lock()
	ret, specificReturn := fake.versionReturnsOnCall[len(fake.versionArgsForCall)]
	fake.versionArgsForCall = append(fake.versionArgsForCall, struct{}{})
	fake.recordInvocation("Version", []interface{}{})
	fake.versionMutex.Unlock()
	if fake.VersionStub != nil {
		return fake.VersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.versionReturns.result1
}

func (fake *UserCC) VersionCallCount() int {
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	return len(fake.versionArgsForCall)
}

func (fake *UserCC) VersionReturns(result1 string) {
	fake.VersionStub = nil
	fake.versionReturns = struct {
		result1 string
	}{result1}
}

func (fake *UserCC) VersionReturnsOnCall(i int, result1 string) {
	fake.VersionStub = nil
	if fake.versionReturnsOnCall == nil {
		fake.versionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.versionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *UserCC) GetDBArtifacts(collNames []string) map[string]*api.DBArtifacts {
	var collNamesCopy []string
	if collNames != nil {
		collNamesCopy = make([]string, len(collNames))
		copy(collNamesCopy, collNames)
	}
	fake.getDBArtifactsMutex.Lock()
	ret, specificReturn := fake.getDBArtifactsReturnsOnCall[len(fake.getDBArtifactsArgsForCall)]
	fake.getDBArtifactsArgsForCall = append(fake.getDBArtifactsArgsForCall, struct {
		collNames []string
	}{collNamesCopy})
	fake.recordInvocation("GetDBArtifacts", []interface{}{collNamesCopy})
	fake.getDBArtifactsMutex.Unlock()
	if fake.GetDBArtifactsStub != nil {
		return fake.GetDBArtifactsStub(collNames)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getDBArtifactsReturns.result1
}

func (fake *UserCC) GetDBArtifactsCallCount() int {
	fake.getDBArtifactsMutex.RLock()
	defer fake.getDBArtifactsMutex.RUnlock()
	return len(fake.getDBArtifactsArgsForCall)
}

func (fake *UserCC) GetDBArtifactsArgsForCall(i int) []string {
	fake.getDBArtifactsMutex.RLock()
	defer fake.getDBArtifactsMutex.RUnlock()
	return fake.getDBArtifactsArgsForCall[i].collNames
}

func (fake *UserCC) GetDBArtifactsReturns(result1 map[string]*api.DBArtifacts) {
	fake.GetDBArtifactsStub = nil
	fake.getDBArtifactsReturns = struct {
		result1 map[string]*api.DBArtifacts
	}{result1}
}

func (fake *UserCC) GetDBArtifactsReturnsOnCall(i int, result1 map[string]*api.DBArtifacts) {
	fake.GetDBArtifactsStub = nil
	if fake.getDBArtifactsReturnsOnCall == nil {
		fake.getDBArtifactsReturnsOnCall = make(map[int]struct {
			result1 map[string]*api.DBArtifacts
		})
	}
	fake.getDBArtifactsReturnsOnCall[i] = struct {
		result1 map[string]*api.DBArtifacts
	}{result1}
}

func (fake *UserCC) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.chaincodeMutex.RLock()
	defer fake.chaincodeMutex.RUnlock()
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	fake.getDBArtifactsMutex.RLock()
	defer fake.getDBArtifactsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *UserCC) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.UserCC = new(UserCC)
